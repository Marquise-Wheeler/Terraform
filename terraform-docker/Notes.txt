Notes.txt
=========================
TODO:
This command uses curl to access the meta-data and retireve the instance IP.
curl http://169.254.169.254/latest/meta-data/public-ipv4
=========================
ISSUE:
When I was attempting to follow the tutorial I was initially unable to connect. I then remembered that since I was not at home my IP was not the same. As a result I made a edit to the inbound rule of the security group. Connection successful.
==================
In the case of multiple lock files the one with the highest serial is the winner.It is updated everytime.
Lineage created when state file created originally. Deteremines if the state file is the correct one.
terraform.tfstate file
=======================
TODO:
Install jq 
apt install jq
jq allows us to see alll the attributes in the state file without accessing it directly
=======================
An alternate way to access the state information is to use the "terraform state list" command.
Show us all of the resources in our state.
Useful when troubleshooting variables and resources.
====================
4 GIT BRANCH COMMANDS
1.) git branch <branchname>
2.) git checkout -b <branchname>
3.) git branch <branchname> <tag>
4.) git branch <branchname> <commit id>
Reference : https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Git-Branch-Create-Example-Command-Checkout-Commit-Tag

DELETE A LOCAL GIT BRANCH CLI
"git branch -d <branch-name>"
DELETE BRANCH ON REMOTE REPO
"git push origin --delete <branch-name>"

GET RID OF STALE BRANCHES
"git remote prune origin"
OR TO DELETE A SINGLE BRANCH
"git branch -d -r origin/<branch-name>
=========================

=========================
ISSUE:
New branch created via CLI not showing in remote repository.
SOLUTION:
The new branch needs to be pushed to the Remote repository using the following format:
git push origin my_new_branch
=========================
=========================
GETTING OUTPUTS
After the tf configuration is applied we can get outputs by entering "terraform output" 
Grep is another way to get information:
EX.1 --> terraform show | grep ip
EX.2 --> terraform show | grep name
=========================
grep -i -A4 provider .terraform.lock.hcl 
=========================
JOIN FUNCTION
terraform console
join(";", ["thing", 1])
=========================
RANDOM FUNCTION
using a cryptographic ranfom number generator will avoid collisions in naming resources.
https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/string.html=========================
